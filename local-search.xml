<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Smali基础</title>
    <link href="/2022/09/02/Smali%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/09/02/Smali%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Smali"><a href="#Smali" class="headerlink" title="Smali"></a>Smali</h1><h2 id="1-smali文件结构"><a href="#1-smali文件结构" class="headerlink" title="1. smali文件结构"></a>1. smali文件结构</h2><ul><li><p>我们一般使用apktool来反编译<code>apk/dex</code>文件，每个内部类反编译时，会单独生成一个smali文件。</p><p><code>MainActivity$1.smali</code>，像这样文件名中包含<code>$</code>符号的smali文件，就是内部类的smali文件</p></li><li><p>smali内容格式：</p><ul><li><code>.class</code>类的完整签名</li><li><code>.super</code>父类类名</li><li><code>.source</code>源文件名</li><li><code>.field</code>字段列表</li><li><code>.implements</code>实现的接口</li><li><code>.annotation</code>注解列表</li><li><code>.method</code>方法列表</li></ul></li></ul><h2 id="2-smali语法"><a href="#2-smali语法" class="headerlink" title="2.smali语法"></a>2.smali语法</h2><ul><li><p>数据类型：</p><ul><li><table><thead><tr><th align="center">Java</th><th align="center">Smali</th></tr></thead><tbody><tr><td align="center">void</td><td align="center">V</td></tr><tr><td align="center">boolean</td><td align="center">Z</td></tr><tr><td align="center">byte</td><td align="center">B</td></tr><tr><td align="center">short</td><td align="center">S</td></tr><tr><td align="center">char</td><td align="center">C</td></tr><tr><td align="center">int</td><td align="center">I</td></tr><tr><td align="center">long</td><td align="center">J</td></tr><tr><td align="center">float</td><td align="center">F</td></tr><tr><td align="center">double</td><td align="center">D</td></tr></tbody></table></li><li><p>数组：</p><ol><li>在类型前面加[来表示该类型的数组，例如<code>[I</code>表示<code>int[]</code>，<code>[Ljava/lang/String</code>表示<code>String[]</code></li><li>表示多维数组，只需要增加<code>[</code>的数量，例如<code>[[I</code>表示二维数组<code>int[][]</code></li></ol></li><li><p>引用类型：</p><p>在Smali中都是用<code>L包名路径/类名</code>表示，</p><p>例如Android中的TextView类，它的包名是 **<code>android.widget</code>**，在Smali中表示这个类，就要写成 <strong><code>Landroid/widget/TextView</code></strong></p></li><li><p>函数定义：</p><p>格式：<code>Func-Name (Para-Type1Para-Type2Para-Type3...)Return-Type</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">// smali语句</span><br><span class="hljs-keyword">void</span> foo() --------&gt; foo ()V<br><span class="hljs-keyword">boolean</span> foo(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>) -----------&gt; foo (III)Z<br>String foo (<span class="hljs-keyword">boolean</span>, <span class="hljs-keyword">int</span>[], <span class="hljs-keyword">int</span>[], String, <span class="hljs-keyword">long</span>) --------&gt; foo (Z[I[ILjava<span class="hljs-regexp">/lang/</span>String;J)Ljava<span class="hljs-regexp">/lang/</span>String<br></code></pre></td></tr></table></figure></li></ul></li><li><p>方法：</p><ul><li><p>语法：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">.method 描述符 方法名(参数类型)返回类型<br>  ``方法代码...<br>.end <span class="hljs-keyword">method</span><br></code></pre></td></tr></table></figure><p>参数类型可以有<strong>0个或多个</strong>，<strong>返回类型必须是一个</strong></p><p><code>.locals</code>：声明当前方法中使用的寄存器数量</p><p><code>.param</code>：指定方法中的参数名</p><p><code>.prologue</code>：声明接下来的内容为DEX指令</p><p><code>.line</code>：方法在Java代码中的行号信息</p></li><li><p>调用：</p><p><code>invoke-xxxxxx &#123;参数列表&#125;, 类名-&gt;方法名(参数类型)返回类型</code></p><table><thead><tr><th align="center">指令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">invoke-virtual</td><td align="center">调用虚方法</td></tr><tr><td align="center">invoke-direct</td><td align="center">直接调用方法</td></tr><tr><td align="center">invoke-static</td><td align="center">调用静态方法</td></tr><tr><td align="center">invoke-super</td><td align="center">调用父类方法</td></tr><tr><td align="center">invoke-interface</td><td align="center">调用接口方法</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java代码</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br>obj.equals(<span class="hljs-string">&quot;456&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">// smali语句<br>invoke-virtual &#123;v0, v1&#125;, Ljava/lang/Object;-&gt;equals(Ljava/lang/Object;)Z<br></code></pre></td></tr></table></figure><p><strong>invoke-xxxxx&#x2F;range</strong>：当调用方法的参数多于5个时（含5个），不能直接使用以上的指令，需要在后面加上<code>/range</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> Smali语句<br>invoke-direct<span class="hljs-regexp">/range&#123;v0..v5&#125;, Lcom/</span>pb<span class="hljs-regexp">/ui/</span>TestActivity;-&gt; h(ILjava<span class="hljs-regexp">/lang/</span>String, Ljava<span class="hljs-regexp">/lang/</span>String;Landroid<span class="hljs-regexp">/content/i</span>ntent;I)Z<br></code></pre></td></tr></table></figure></li><li><p>返回值</p><p>Smali中需要分开来表示调用函数和返回函数结果，</p><p>如果调用的函数返回非void, 还需要move-result(返回基本数据类型)和move-result-object(返回对象)指令:</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">// smali语句<span class="hljs-built_in"></span><br><span class="hljs-built_in">const-string </span>v0,<span class="hljs-string">&quot;Eric&quot;</span><br>invoke-static&#123;v0&#125;,<span class="hljs-class">Lcom/pbi;</span>-&gt;t(<span class="hljs-class">Ljava/lang/String;</span>)<span class="hljs-class">Ljava/lang/String;</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">move-result-object </span>v2;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>字段：</p><ul><li><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// .field 描述符 字段名:字段类型</span><br><span class="hljs-comment">// java代码</span><br><span class="hljs-keyword">public</span> String text;<br><span class="hljs-comment">// smali语句</span><br>.field <span class="hljs-keyword">public</span> text:Ljava/lang/String;<br></code></pre></td></tr></table></figure></li><li><p>引用字段：</p><p><strong><code>类名-&gt;字段名:字段类名</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java代码</span><br>System.out.println(<span class="hljs-string">&quot;Hello world&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">// smali语句，调用 println 方法前需要现将 System 类的字段 out 放到寄存器 v0 中<span class="hljs-built_in"></span><br><span class="hljs-built_in">sget-object </span>v0, <span class="hljs-class">Ljava/lang/System;</span>-&gt;out:<span class="hljs-class">Ljava/io/PrintStream;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>寄存器：</p><p>在Smali中，不能直接把字符串参数传递给方法。需要一个寄存器（比如v0），先把”Hello”放到v0中，然后再调用abc方法</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment"># 定义一个字符串常量&quot;Hello&quot;放到v0中</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">const-string </span>v0, <span class="hljs-string">&quot;Hello&quot;</span><br><span class="hljs-comment"># 调用abc方法，需要的参数放在v0中</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">invoke-static </span>&#123;v0&#125;, <span class="hljs-class">LXX;</span>-&gt;abc(<span class="hljs-class">Ljava/lang/String;</span>)V<br></code></pre></td></tr></table></figure><p><strong>参数寄存器</strong>：Smali还特意定义了一种参数寄存器pN，用于存放这个方法传入的参数的值。</p><p>如果一个方法有n个寄存器，有m个参数，那么n必须大于等于m，并且n个寄存器的后面m个是参数寄存器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br> <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> i)</span>&#123;<br>        System.out.println(s);<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs smali">// test1()函数的Smali语句<br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> static</span> test1(<span class="hljs-class">Ljava/lang/String;</span>I)V<br><span class="hljs-keyword">    .registers</span> 3<br> <br><span class="hljs-keyword">    .prologue</span><br><span class="hljs-keyword">    .line</span> 4<br>   <span class="hljs-built_in"> sget-object </span>v0, <span class="hljs-class">Ljava/lang/System;</span>-&gt;out:<span class="hljs-class">Ljava/io/PrintStream;</span><br> <br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v0, p0&#125;, <span class="hljs-class">Ljava/io/PrintStream;</span>-&gt;println(<span class="hljs-class">Ljava/lang/String;</span>)V<br> <br><span class="hljs-keyword">    .line</span> 5<br>   <span class="hljs-built_in"> sget-object </span>v0, <span class="hljs-class">Ljava/lang/System;</span>-&gt;out:<span class="hljs-class">Ljava/io/PrintStream;</span><br> <br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v0, p1&#125;, <span class="hljs-class">Ljava/io/PrintStream;</span>-&gt;println(I)V<br> <br><span class="hljs-keyword">    .line</span> 6<br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><span class="hljs-keyword">.end method</span><br></code></pre></td></tr></table></figure></li><li><p>函数实体</p><ul><li><p>if判断</p><p>格式：<code>if-[test] v1,v2, [condition]</code></p><p>其中[condition]为符合判断结果后的跳转条件，需要提前定义好。判断操作也通常和goto配合使用，用来实现循环或者if-else语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java代码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        String result;<br>        <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>            result = <span class="hljs-string">&quot;a great than b&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            result = <span class="hljs-string">&quot;a less than or equals b&quot;</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>对应的Smali代码如下，在Java中编写的if语句，往往在对应的Smali中，会变成相反的判断逻辑：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-keyword">.method</span><span class="hljs-keyword"> private</span> test()V<br><span class="hljs-keyword">    .registers</span> 4<br><br><span class="hljs-keyword">    .line</span> 24<br>   <span class="hljs-built_in"> const/4 </span>v0, 0x0<br><br><span class="hljs-keyword">    .line</span> 25<br><span class="hljs-keyword">    .local</span> v0, <span class="hljs-string">&quot;a&quot;</span>:I<br>   <span class="hljs-built_in"> const/4 </span>v1, 0x1<br><br><span class="hljs-keyword">    .line</span> 27<br><span class="hljs-keyword">    .local</span> v1, <span class="hljs-string">&quot;b&quot;</span>:I<br>    // 判断a&lt;=b，成立则跳转到cond_7，否则a&gt;b继续执行<br>   <span class="hljs-built_in"> if-le </span>v0, v1,<span class="hljs-keyword"> :cond_7</span><br><br><span class="hljs-keyword">    .line</span> 28<br>   <span class="hljs-built_in"> const-string </span>v2, <span class="hljs-string">&quot;a great than b&quot;</span><br><br><span class="hljs-keyword">    .line</span> 28<br><span class="hljs-keyword">    .local</span> v2, <span class="hljs-string">&quot;result&quot;</span>:<span class="hljs-class">Ljava/lang/String;</span><br>    // 使用goto来防止跳转至cond_7，等同于else分支<br>   <span class="hljs-built_in"> goto </span>:goto_9<br><br><span class="hljs-keyword">    .line</span> 30<span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end local</span> v2    <span class="hljs-comment"># &quot;result&quot;:Ljava/lang/String;</span><br>   <span class="hljs-keyword"> :cond_7</span><br>   <span class="hljs-built_in"> const-string </span>v2, <span class="hljs-string">&quot;a less than or equals b&quot;</span><br><br><span class="hljs-keyword">    .line</span> 32<br><span class="hljs-keyword">    .restart</span> local v2    <span class="hljs-comment"># &quot;result&quot;:Ljava/lang/String;</span><br>   <span class="hljs-keyword"> :goto_9</span><br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><span class="hljs-keyword">.end method</span><br></code></pre></td></tr></table></figure></li><li><p>for</p><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++)｛｝<br></code></pre></td></tr></table></figure><p>smali代码：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs smali">//<span class="hljs-built_in"> int </span>i=0<span class="hljs-built_in"></span><br><span class="hljs-built_in">const/4 </span>v0, 0x0<span class="hljs-keyword"></span><br><span class="hljs-keyword">:goto_1</span><br>// 10<span class="hljs-built_in"></span><br><span class="hljs-built_in">const/16 </span>v1, 0xa<br>//<span class="hljs-built_in"> if </span>i&gt;=10<span class="hljs-built_in"></span><br><span class="hljs-built_in">if-ge </span>v0, v1,<span class="hljs-keyword"> :cond_8</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">add-int/lit8 </span>v0, v0, 0x1<br>// 继续循环<span class="hljs-built_in"></span><br><span class="hljs-built_in">goto </span>:goto_1<br>// 退出循环<span class="hljs-keyword"></span><br><span class="hljs-keyword">:cond_8</span><br>return-void<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-smali实例操作"><a href="#3-smali实例操作" class="headerlink" title="3.smali实例操作"></a>3.smali实例操作</h2><p><strong>绕过app签名验证机制</strong></p><ol><li><p>以书旗app为分析样本，shuqi.apk。已知该app存在签名验证机制</p></li><li><p>首先使用apktool对样本apk反编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">apktool d -f shuqi.apk -only-main-classes  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">正常apktool d ***.apk就可以但是书旗的会提示，非法Dex，这是因为apk里有加密过后的dex文件，比如有些apk的assets目录下有加密后的Dex文件，添加–only-main-classes参数</span><br></code></pre></td></tr></table></figure><p>反编译生成以下文件：</p><img src="/Users/bob/.config/joplin-desktop/resources/截屏2022-08-26 11.33.25.png" alt="截屏2022-08-26 11.33.25" style="zoom:50%;" /></li><li><p>按照正常的程序我们现在就可以修改反编译后的代码，然后打包、重新签名，再次进行安装。</p><p>但是该app有签名验证，签名验证能防止进行二次打包，会将打包后前签名和代码中的进行比对，如果签名不对将启动失败。</p></li><li><p>然后，将shuqi.apk载入jadx进行反汇编，找到入口</p><img src="/Users/bob/.config/joplin-desktop/resources/截屏2022-08-26 11.14.51.png" alt="截屏2022-08-26 11.14.51" style="zoom:50%;" /><p>直接搜索包含<code>Application</code>字段的类，一般混淆也不会混淆这个入口</p></li><li><p>跟进到<code>com.shuqi.app.ShuqiApplication</code>中</p><img src="/Users/bob/.config/joplin-desktop/resources/截屏2022-08-26 11.41.49.png" alt="截屏2022-08-26 11.41.49" style="zoom:50%;" /><p>发现前面验证函数<code>checkSigAsync()</code></p></li><li><p>继续跟进到<code>checkSigAsync()</code>中</p><img src="/Users/bob/.config/joplin-desktop/resources/截屏2022-08-26 11.44.25.png" alt="截屏2022-08-26 11.44.25" style="zoom:50%;" /><p>红框中就是签名验证的相关操作。我们绕过验证一般有两种方式：</p><p>一种是修改java代码重新编译，但是会因为开发的环境的差异导致最后运行失败，</p><p>另一种，就是直接修改smali文件，然后二次打包build生成新的apk</p></li><li><p>下面我们回到smali文件中分析，由上面的分析知道要分析的smali文件在<code>shuqi/smali/com/shuqi/app/</code>路径下</p><p>打开<code>ShuqiApplication.smali</code></p><ul><li><p>找到<code>checkSigAsync()</code>方法：</p><img src="/Users/bob/.config/joplin-desktop/resources/截屏2022-08-26 11.53.41.png" alt="截屏2022-08-26 11.53.41" style="zoom:50%;" /></li><li><p>跟进到smali中调用该函数，在166行</p><img src="/Users/bob/.config/joplin-desktop/resources/截屏2022-08-26 10.52.53.png" alt="截屏2022-08-26 10.52.53" style="zoom:50%;" /></li></ul></li><li><p>简单的绕过验证函数，直接删除该调用，再启动app后就不会进行签名验证了。</p></li><li><p>修改smali文件后，我们重新用apktool进行编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apktool b ./shuqi-decompiled  # 对shuqi目录进行打包<br></code></pre></td></tr></table></figure></li><li><p>最后，生成自己的签名信息，然后修改后重打包的apk就能正常安装运行了。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Smali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/02/hello-world/"/>
    <url>/2022/09/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
